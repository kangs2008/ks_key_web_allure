{
  "uid" : "dbdbb33f7633790f",
  "name" : "test_login[data0]",
  "fullName" : "TestCases.Login.test_baidu.TestLogin#test_login",
  "historyId" : "f908aac11843ade8edb47c43ceeede51",
  "time" : {
    "start" : 1632227761256,
    "stop" : 1632227761256,
    "duration" : 0
  },
  "description" : "FILE SHEET： t_接  \n\nFILE NAME： test_webdata.xlsx  \n\nFILE PATH： D:/desk20201127/ks_key_web_allure/TestCases/test_webdata.xlsx",
  "descriptionHtml" : "<p>FILE SHEET： t_接</p>\n<p>FILE NAME： test_webdata.xlsx</p>\n<p>FILE PATH： D:/desk20201127/ks_key_web_allure/TestCases/test_webdata.xlsx</p>\n",
  "status" : "broken",
  "statusMessage" : "TypeError: the JSON object must be str, bytes or bytearray, not function",
  "statusTrace" : "self = <TestCases.Login.test_baidu.TestLogin object at 0x0000025ACE629A88>\ndata = {'file': 'test_webdata.xlsx', 'filepath': 'D:/desk20201127/ks_key_web_allure/TestCases/test_webdata.xlsx', 'filesheet'... 'input_text': '', ...}, {'capture': '1', 'exec': '3', 'expect': '', 'input_text': 'python', ...}], 'sheetname': 't_接'}\nstart_session = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"4ed169a51a4d50e29c3b3c1f442296e8\")>\n\n    @allure.story(\"111测试login 方法，baidu\")\n    @pytest.mark.parametrize('data', get_excel_data())\n    def test_login(self, data, start_session):\n        \"\"\"描述！！！！\"\"\"\n        logger.info(f\" 执行 {self.__class__.__name__} 测试套件Suite \")\n        logger.info(f\" 执行 {sys._getframe().f_code.co_name} 测试用例Case \")\n        logger.info(f\" 执行 {data}\")\n    \n>       return_value = data_value(start_session, data)\n\nTestCases\\Login\\test_baidu.py:24: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nTestCases\\web_data_keywords.py:38: in data_value\n    __new_data(re_value, 'return_values', __t_data)\nTestCases\\web_data_keywords.py:47: in __new_data\n    _data = json.loads(_data)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\ns = <function __t_data at 0x0000025ACE4F2558>, encoding = None, cls = None\nobject_hook = None, parse_float = None, parse_int = None, parse_constant = None\nobject_pairs_hook = None, kw = {}\n\n    def loads(s, *, encoding=None, cls=None, object_hook=None, parse_float=None,\n            parse_int=None, parse_constant=None, object_pairs_hook=None, **kw):\n        \"\"\"Deserialize ``s`` (a ``str``, ``bytes`` or ``bytearray`` instance\n        containing a JSON document) to a Python object.\n    \n        ``object_hook`` is an optional function that will be called with the\n        result of any object literal decode (a ``dict``). The return value of\n        ``object_hook`` will be used instead of the ``dict``. This feature\n        can be used to implement custom decoders (e.g. JSON-RPC class hinting).\n    \n        ``object_pairs_hook`` is an optional function that will be called with the\n        result of any object literal decoded with an ordered list of pairs.  The\n        return value of ``object_pairs_hook`` will be used instead of the ``dict``.\n        This feature can be used to implement custom decoders.  If ``object_hook``\n        is also defined, the ``object_pairs_hook`` takes priority.\n    \n        ``parse_float``, if specified, will be called with the string\n        of every JSON float to be decoded. By default this is equivalent to\n        float(num_str). This can be used to use another datatype or parser\n        for JSON floats (e.g. decimal.Decimal).\n    \n        ``parse_int``, if specified, will be called with the string\n        of every JSON int to be decoded. By default this is equivalent to\n        int(num_str). This can be used to use another datatype or parser\n        for JSON integers (e.g. float).\n    \n        ``parse_constant``, if specified, will be called with one of the\n        following strings: -Infinity, Infinity, NaN.\n        This can be used to raise an exception if invalid JSON numbers\n        are encountered.\n    \n        To use a custom ``JSONDecoder`` subclass, specify it with the ``cls``\n        kwarg; otherwise ``JSONDecoder`` is used.\n    \n        The ``encoding`` argument is ignored and deprecated.\n        \"\"\"\n        if isinstance(s, str):\n            if s.startswith('\\ufeff'):\n                raise JSONDecodeError(\"Unexpected UTF-8 BOM (decode using utf-8-sig)\",\n                                      s, 0)\n        else:\n            if not isinstance(s, (bytes, bytearray)):\n>               raise TypeError(f'the JSON object must be str, bytes or bytearray, '\n                                f'not {s.__class__.__name__}')\nE               TypeError: the JSON object must be str, bytes or bytearray, not function\n\nC:\\Python37\\lib\\json\\__init__.py:341: TypeError",
  "flaky" : false,
  "newFailed" : false,
  "beforeStages" : [ {
    "name" : "start_session",
    "time" : {
      "start" : 1632227756856,
      "stop" : 1632227761248,
      "duration" : 4392
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "shouldDisplayMessage" : false,
    "attachmentsCount" : 0,
    "stepsCount" : 0,
    "hasContent" : false
  }, {
    "name" : "report",
    "time" : {
      "start" : 1632227756856,
      "stop" : 1632227756856,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "shouldDisplayMessage" : false,
    "attachmentsCount" : 0,
    "stepsCount" : 0,
    "hasContent" : false
  }, {
    "name" : "_session_faker",
    "time" : {
      "start" : 1632227756746,
      "stop" : 1632227756856,
      "duration" : 110
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "shouldDisplayMessage" : false,
    "attachmentsCount" : 0,
    "stepsCount" : 0,
    "hasContent" : false
  } ],
  "testStage" : {
    "description" : "FILE SHEET： t_接  \n\nFILE NAME： test_webdata.xlsx  \n\nFILE PATH： D:/desk20201127/ks_key_web_allure/TestCases/test_webdata.xlsx",
    "status" : "broken",
    "statusMessage" : "TypeError: the JSON object must be str, bytes or bytearray, not function",
    "statusTrace" : "self = <TestCases.Login.test_baidu.TestLogin object at 0x0000025ACE629A88>\ndata = {'file': 'test_webdata.xlsx', 'filepath': 'D:/desk20201127/ks_key_web_allure/TestCases/test_webdata.xlsx', 'filesheet'... 'input_text': '', ...}, {'capture': '1', 'exec': '3', 'expect': '', 'input_text': 'python', ...}], 'sheetname': 't_接'}\nstart_session = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"4ed169a51a4d50e29c3b3c1f442296e8\")>\n\n    @allure.story(\"111测试login 方法，baidu\")\n    @pytest.mark.parametrize('data', get_excel_data())\n    def test_login(self, data, start_session):\n        \"\"\"描述！！！！\"\"\"\n        logger.info(f\" 执行 {self.__class__.__name__} 测试套件Suite \")\n        logger.info(f\" 执行 {sys._getframe().f_code.co_name} 测试用例Case \")\n        logger.info(f\" 执行 {data}\")\n    \n>       return_value = data_value(start_session, data)\n\nTestCases\\Login\\test_baidu.py:24: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nTestCases\\web_data_keywords.py:38: in data_value\n    __new_data(re_value, 'return_values', __t_data)\nTestCases\\web_data_keywords.py:47: in __new_data\n    _data = json.loads(_data)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\ns = <function __t_data at 0x0000025ACE4F2558>, encoding = None, cls = None\nobject_hook = None, parse_float = None, parse_int = None, parse_constant = None\nobject_pairs_hook = None, kw = {}\n\n    def loads(s, *, encoding=None, cls=None, object_hook=None, parse_float=None,\n            parse_int=None, parse_constant=None, object_pairs_hook=None, **kw):\n        \"\"\"Deserialize ``s`` (a ``str``, ``bytes`` or ``bytearray`` instance\n        containing a JSON document) to a Python object.\n    \n        ``object_hook`` is an optional function that will be called with the\n        result of any object literal decode (a ``dict``). The return value of\n        ``object_hook`` will be used instead of the ``dict``. This feature\n        can be used to implement custom decoders (e.g. JSON-RPC class hinting).\n    \n        ``object_pairs_hook`` is an optional function that will be called with the\n        result of any object literal decoded with an ordered list of pairs.  The\n        return value of ``object_pairs_hook`` will be used instead of the ``dict``.\n        This feature can be used to implement custom decoders.  If ``object_hook``\n        is also defined, the ``object_pairs_hook`` takes priority.\n    \n        ``parse_float``, if specified, will be called with the string\n        of every JSON float to be decoded. By default this is equivalent to\n        float(num_str). This can be used to use another datatype or parser\n        for JSON floats (e.g. decimal.Decimal).\n    \n        ``parse_int``, if specified, will be called with the string\n        of every JSON int to be decoded. By default this is equivalent to\n        int(num_str). This can be used to use another datatype or parser\n        for JSON integers (e.g. float).\n    \n        ``parse_constant``, if specified, will be called with one of the\n        following strings: -Infinity, Infinity, NaN.\n        This can be used to raise an exception if invalid JSON numbers\n        are encountered.\n    \n        To use a custom ``JSONDecoder`` subclass, specify it with the ``cls``\n        kwarg; otherwise ``JSONDecoder`` is used.\n    \n        The ``encoding`` argument is ignored and deprecated.\n        \"\"\"\n        if isinstance(s, str):\n            if s.startswith('\\ufeff'):\n                raise JSONDecodeError(\"Unexpected UTF-8 BOM (decode using utf-8-sig)\",\n                                      s, 0)\n        else:\n            if not isinstance(s, (bytes, bytearray)):\n>               raise TypeError(f'the JSON object must be str, bytes or bytearray, '\n                                f'not {s.__class__.__name__}')\nE               TypeError: the JSON object must be str, bytes or bytearray, not function\n\nC:\\Python37\\lib\\json\\__init__.py:341: TypeError",
    "steps" : [ {
      "name" : "Test title：标题",
      "time" : {
        "start" : 1632227761256,
        "stop" : 1632227761256,
        "duration" : 0
      },
      "status" : "passed",
      "steps" : [ ],
      "attachments" : [ ],
      "parameters" : [ ],
      "shouldDisplayMessage" : false,
      "attachmentsCount" : 0,
      "stepsCount" : 0,
      "hasContent" : false
    } ],
    "attachments" : [ {
      "uid" : "5329cc5e5852f509",
      "name" : "异常图",
      "source" : "5329cc5e5852f509.png",
      "type" : "image/png",
      "size" : 127029
    }, {
      "uid" : "d4d074c2aec05d11",
      "name" : "log",
      "source" : "d4d074c2aec05d11.txt",
      "type" : "text/plain",
      "size" : 2636
    } ],
    "parameters" : [ ],
    "shouldDisplayMessage" : true,
    "attachmentsCount" : 2,
    "stepsCount" : 1,
    "hasContent" : true
  },
  "afterStages" : [ {
    "name" : "start_session::0",
    "time" : {
      "start" : 1632227761904,
      "stop" : 1632227765469,
      "duration" : 3565
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "shouldDisplayMessage" : false,
    "attachmentsCount" : 0,
    "stepsCount" : 0,
    "hasContent" : false
  }, {
    "name" : "report::0",
    "time" : {
      "start" : 1632227765509,
      "stop" : 1632227771436,
      "duration" : 5927
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "shouldDisplayMessage" : false,
    "attachmentsCount" : 0,
    "stepsCount" : 0,
    "hasContent" : false
  } ],
  "labels" : [ {
    "name" : "feature",
    "value" : "API_interface_test"
  }, {
    "name" : "story",
    "value" : "test_webdata.xlsx<>t_接"
  }, {
    "name" : "feature",
    "value" : "login 异常测试用例，feature"
  }, {
    "name" : "story",
    "value" : "111测试login 方法，baidu"
  }, {
    "name" : "tag",
    "value" : "@pytest.mark.usefixtures('start_session')"
  }, {
    "name" : "parentSuite",
    "value" : "TestCases.Login"
  }, {
    "name" : "suite",
    "value" : "test_baidu"
  }, {
    "name" : "subSuite",
    "value" : "TestLogin"
  }, {
    "name" : "host",
    "value" : "DESKTOP-V8HO8M4"
  }, {
    "name" : "thread",
    "value" : "7448-MainThread"
  }, {
    "name" : "framework",
    "value" : "pytest"
  }, {
    "name" : "language",
    "value" : "cpython3"
  }, {
    "name" : "package",
    "value" : "TestCases.Login.test_baidu"
  }, {
    "name" : "resultFormat",
    "value" : "allure2"
  } ],
  "parameters" : [ {
    "name" : "data",
    "value" : "{'sheetname': 't_接', 'file': 'test_webdata.xlsx', 'filepath': 'D:/desk20201127/ks_key_web_allure/TestCases/test_webdata.xlsx', 'filesheet': [{'num': '1', 'exec': '1', 'title': '标题', 'page': 'baidu_page', 'method': 'get_news_text', 'input_text': '', 'return_values': 'news', 'expect': '', 'capture': '1'}, {'num': '2', 'exec': '2', 'title': '', 'page': '', 'method': 'assert_equal', 'input_text': '', 'return_values': '${news}', 'expect': '新闻', 'capture': ''}, {'num': '3', 'exec': '3', 'title': '首页检索', 'page': 'baidu_page', 'method': 'search', 'input_text': 'python', 'return_values': '', 'expect': '', 'capture': '1'}]}"
  } ],
  "links" : [ ],
  "hidden" : true,
  "retry" : true,
  "extra" : {
    "categories" : [ ],
    "tags" : [ "@pytest.mark.usefixtures('start_session')" ]
  },
  "source" : "dbdbb33f7633790f.json",
  "parameterValues" : [ "{'sheetname': 't_接', 'file': 'test_webdata.xlsx', 'filepath': 'D:/desk20201127/ks_key_web_allure/TestCases/test_webdata.xlsx', 'filesheet': [{'num': '1', 'exec': '1', 'title': '标题', 'page': 'baidu_page', 'method': 'get_news_text', 'input_text': '', 'return_values': 'news', 'expect': '', 'capture': '1'}, {'num': '2', 'exec': '2', 'title': '', 'page': '', 'method': 'assert_equal', 'input_text': '', 'return_values': '${news}', 'expect': '新闻', 'capture': ''}, {'num': '3', 'exec': '3', 'title': '首页检索', 'page': 'baidu_page', 'method': 'search', 'input_text': 'python', 'return_values': '', 'expect': '', 'capture': '1'}]}" ]
}